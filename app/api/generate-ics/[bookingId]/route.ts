import { NextResponse } from 'next/server';
import ical from 'ical-generator';

export async function GET(request, { params }) {
    const { bookingId } = params
    const bookingDetails = async () => {
        try {
            const response = await fetch(`http://127.0.0.1:8000/bookings/${bookingId}`)
            const data = await response.json()
            console.log(data)
            return data
        } catch (err) {
            console.error(err)
        }
    }
    const booking = await bookingDetails();
    const cal = ical({ name: 'My Next.js Event' });

    cal.createEvent({
        start: booking?.start_time ? new Date(booking.start_time) : new Date(),
        end: booking?.end_time ? new Date(booking.end_time) : new Date(Date.now() + 3600 * 1000),
        summary: 'Next.js 14 ICS Demo Event',
        description: 'This is a test event generated by Next.js 14!',
        location: 'Virtual',
        url: 'https://nextjs.org/',
    });

    // Set headers for ICS file download
    return new NextResponse(cal.toString(), {
        status: 200,
        // headers: {
        //     'Content-Type': 'text/calendar',
        //     'Content-Disposition': 'attachment; filename="event.ics"',
        // },
    });
}